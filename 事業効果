#事業効果見積のためデータを書き換える
df.loc[df['months'] < 11, 'months'] = df['months']+9
df.loc[df['mou_Mean'] < 11, 'mou_Mean'] = df['mou_Mean']+250
df.loc[df['hnd_price'] < 11, 'hnd_price'] = df['hnd_price']*2

use_features = ["months", "change_mou", "mou_Mean", "totmrc_Mean", "hnd_price"]
target = train["churn"].values

train = train[use_features]
train["churn"] = target
test = df[use_features]

# trainデータの確認
print(f"train shape: {train.shape}")
test.head(3)
# testの欠損値を確認
train.isnull().sum()

#平均値で欠損を補完
train["change_mou"].fillna(train["change_mou"].mean(), inplace=True)
test["change_mou"].fillna(train["change_mou"].mean(), inplace=True)
train["mou_Mean"].fillna(train["mou_Mean"].mean(), inplace=True)
test["mou_Mean"].fillna(train["mou_Mean"].mean(), inplace=True)
train["totmrc_Mean"].fillna(train["totmrc_Mean"].mean(), inplace=True)
test["totmrc_Mean"].fillna(train["totmrc_Mean"].mean(), inplace=True)
train["hnd_price"].fillna(train["hnd_price"].mean(), inplace=True)
test["hnd_price"].fillna(train["hnd_price"].mean(), inplace=True)

test.isnull().sum()

# ライブラリの読み込み
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import roc_auc_score

# 目的変数と説明変数に分割
X = train.drop("churn", axis=1).values
y = train["churn"].values
X_test = test.values
# 標準化
sc = StandardScaler()
sc.fit(X)
X_std = sc.transform(X)
X_test_std = sc.transform(X_test)

# 訓練データと評価データに分割
X_train, X_valid, y_train, y_valid = train_test_split(X_std, y, test_size=0.3, stratify=y, random_state=0)

from sklearn.datasets import make_blobs
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(random_state=42)
lr.fit(X_train, y_train)

print('Logistic Regression \n')
print('Train Score: {}'.format(round(lr.score(X_train, y_train), 3)))
print(' Test Score: {}'.format(round(lr.score(X_valid, y_valid), 3)))

# MLPClassifier
from sklearn.neural_network import MLPClassifier
mlpc = MLPClassifier(hidden_layer_sizes=(100, 100, 10), random_state=0)
mlpc.fit(X_train, y_train)
print('Multilayer Perceptron \n')
print('Train Score: {}'.format(round(mlpc.score(X_train, y_train), 3)))
print(' Test Score: {}'.format(round(mlpc.score(X_valid, y_valid), 3)))

# XGBClassifier
from xgboost import XGBClassifier
xgb = XGBClassifier(random_state=0)
xgb.fit(X_train, y_train)
print('Train Score: {}'.format(round(xgb.score(X_train, y_train), 3)))
print(' Test Score: {}'.format(round(xgb.score(X_valid, y_valid), 3)))

# LGBMClassifier
from lightgbm import LGBMClassifier
lgb = LGBMClassifier(random_state=0)
lgb.fit(X_train, y_train)
print('Train Score: {}'.format(round(lgb.score(X_train, y_train), 3)))
print(' Test Score: {}'.format(round(lgb.score(X_valid, y_valid), 3)))


lr_pred = lr.predict_proba(X_test)
mlpc_pred = mlpc.predict_proba(X_test)
xgb_pred = xgb.predict_proba(X_test)
lgb_pred = lgb.predict_proba(X_test)

#モデルのアンサンブル
pred_proba = (xgb_pred + lr_pred + mlpc_pred+lgb_pred) / 4
pred = pred_proba.argmax(axis=1)

#効果の表示
test["churn"]=pred
# showing the imbalanced class
sns.countplot(x = 'churn', data = test)
plt.show()
